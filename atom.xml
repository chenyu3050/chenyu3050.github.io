<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zer0_1s</title>
  
  
  <link href="/chenyu3050.github.io/atom.xml" rel="self"/>
  
  <link href="https://chenyu3050.github.io/"/>
  <updated>2020-07-23T03:21:10.807Z</updated>
  <id>https://chenyu3050.github.io/</id>
  
  <author>
    <name>zer0_1s</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hitcon1</title>
    <link href="https://chenyu3050.github.io/2020/07/23/Hitcon1/"/>
    <id>https://chenyu3050.github.io/2020/07/23/Hitcon1/</id>
    <published>2020-07-23T02:04:52.649Z</published>
    <updated>2020-07-23T03:21:10.807Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Hitcon-training"><a href="#Hitcon-training" class="headerlink" title="Hitcon-training"></a>Hitcon-training</h2><pre><code>git clone https://github.com/scwuaptx/HITCON-Training.git</code></pre><p><strong>已有环境，git克隆到当前目录</strong></p><h2 id="HITCON"><a href="#HITCON" class="headerlink" title="HITCON"></a>HITCON</h2><h3 id="lab1-多种解法"><a href="#lab1-多种解法" class="headerlink" title="lab1 | 多种解法"></a>lab1 | 多种解法</h3><p><img src= "/chenyu3050.github.io/img/loading.gif" data-src="https://raw.githubusercontent.com/chenyu3050/imgs/master/1.png" alt="avatar"><br><img src= "/chenyu3050.github.io/img/loading.gif" data-src="https://raw.githubusercontent.com/chenyu3050/imgs/master/3.png" alt="avatar"><br><img src= "/chenyu3050.github.io/img/loading.gif" data-src="https://raw.githubusercontent.com/chenyu3050/imgs/master/4.png" alt="avatar"><br><strong>buf=v2，则异或打印flag，但是buf无法被v2覆盖，所以无法从输入端控制，但是异或的v54的用char显示，根据小端模式，推知Do_y，即输入（0x44 6F5F79）=&gt;0x795f6f44(内存中/栈中)=&gt;(y_oD),所以用python复原字符串</strong></p><pre><code>list=[0x795f6f44,0x6B5F756F,0x5F776F6E,0x5F796877,0x745F796D,0x6D6D6165,0x5F657461,0x6E61724F, 0x695F6567,0x6F735F73,0x676E615F,0x3F3F7972] #0x3fstr=&quot;&quot;for i in list:str+=chr(i%0x100)str+=chr(int(i%0x10000/0x100))str+=chr(int(i%0x1000000/0x10000))str+=chr(int((i%0x100000000/0x1000000)))str+=chr(0x3f)print(str)</code></pre><p><strong>以上是python对字符串的复原，复原即下方的key</strong></p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(){   char key[] = &quot;Do_you_know_why_my_teammate_Orange_is_so_angry???&quot;;    char cipher[] = {7, 59, 25, 2, 11, 16, 61, 30, 9, 8, 18, 45, 40, 89, 10, 0, 30, 22, 0, 4, 85, 22, 8, 31, 7, 1, 9, 0, 126, 28, 62, 10, 30, 11, 107, 4, 66, 60, 44, 91, 49, 85, 2, 30, 33, 16, 76, 30, 66};for(int i = 0 ; i &lt; sizeof(cipher) ; i++){        printf(&quot;%c&quot;,cipher[i]^key[i]);    }return 0;}</code></pre><p><img src= "/chenyu3050.github.io/img/loading.gif" data-src="https://raw.githubusercontent.com/chenyu3050/imgs/master/2.png" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Hitcon-training&quot;&gt;&lt;a href=&quot;#Hitcon-training&quot; class=&quot;headerlink&quot; title=&quot;Hitcon-training&quot;&gt;&lt;/a&gt;Hitcon-training&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;git c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>prelink</title>
    <link href="https://chenyu3050.github.io/2020/07/20/prelink/"/>
    <id>https://chenyu3050.github.io/2020/07/20/prelink/</id>
    <published>2020-07-20T11:07:07.973Z</published>
    <updated>2020-07-21T11:45:09.438Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="编译与链接"><a href="#编译与链接" class="headerlink" title="编译与链接"></a>编译与链接</h2><h3>被隐藏的过程</h3><pre><code>$gcc hello.c$./a.outHello world!</code></pre><p><strong>从源代码到可执行程序之间发生了什么？</strong></p><h3 id="第一步-预编译"><a href="#第一步-预编译" class="headerlink" title="第一步|预编译"></a>第一步|预编译</h3><pre><code>gcc -E hello.c -o hello.i                 #Ccpp hello.c &gt; hello.i                    #C++</code></pre><ul><li>删除#define,展开对应的宏定义</li><li>处理条件预编译指令，#if,#ifdef,#else等</li><li>递归讲#include包含文件插入对应位置</li><li>删除注释，添加行号，文件明标识，方便调试</li><li>保留下面编译用的#prama编译器指令</li></ul><h3 id="第二步-编译"><a href="#第二步-编译" class="headerlink" title="第二步 | 编译"></a>第二步 | 编译</h3><pre><code>gcc -S hello.i -o hello.scc1 hello.c                #合并预编译，编译gcc -S hello.c -o hello.s  #合并预编译，编译</code></pre><p><strong>对预处理的文件词法，语法，语义分析，并优化</strong></p><h3 id="第三步-汇编"><a href="#第三步-汇编" class="headerlink" title="第三步 | 汇编"></a>第三步 | 汇编</h3><pre><code>as hello.s -o hello.o  #as 是汇编器gcc -c hello.s -o hello.o gcc -c hello.c -o hello.o #产生目标文件</code></pre><p><strong>从汇编代码到机器指令</strong></p><h3 id="第四步-链接"><a href="#第四步-链接" class="headerlink" title="第四步 | 链接"></a>第四步 | 链接</h3><p><strong>简单来说：链接器是将很多的目标文件（.o）链接起来</strong></p><h2 id="编译-了解一下"><a href="#编译-了解一下" class="headerlink" title="编译  | 了解一下"></a>编译  | 了解一下</h2><pre><code>array[index]=（index+4）*(2+6);</code></pre><h4 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h4><p><strong>扫描器扫描分割，比如array是标识符，[是左括号等等，C语言的宏展开交给独立的预处理器。</strong></p><h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p><strong>语法分析器已表达式为节点，构建语法分析树。</strong></p><p><img src= "/chenyu3050.github.io/img/loading.gif" data-src="https://raw.githubusercontent.com/chenyu3050/imgs/master/a.jpg" alt="avatar"></p><h4 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h4><p><strong>静态语义分析：声明，类型匹配，类型转换</strong></p><p><img src= "/chenyu3050.github.io/img/loading.gif" data-src="https://raw.githubusercontent.com/chenyu3050/imgs/master/b.jpg" alt="avatar"></p><h4 id="源码优化-amp-目标代码生成及优化"><a href="#源码优化-amp-目标代码生成及优化" class="headerlink" title="源码优化&amp;目标代码生成及优化"></a>源码优化&amp;目标代码生成及优化</h4><p><strong>源码优化：比如2+6被优化成8，目标代码生成及优化：删除多余指令，是有合适的寻址方式等等。</strong></p><h2 id="链接-略懂略懂"><a href="#链接-略懂略懂" class="headerlink" title="链接 | 略懂略懂"></a>链接 | 略懂略懂</h2><h4 id="历史久远-从纸带说起"><a href="#历史久远-从纸带说起" class="headerlink" title="历史久远 | 从纸带说起"></a>历史久远 | 从纸带说起</h4><p><img src= "/chenyu3050.github.io/img/loading.gif" data-src="https://raw.githubusercontent.com/chenyu3050/imgs/master/c.jpg" alt="avatar"></p><p><strong>上图就是纸带，左侧是行号，试想要是插入指令在某一行，对应的在其中的目标地址就要全部重新算，这个过程即是重定位，由于地址是数字，变化会很复杂，所以才去地址符号化策略，譬如’foo’，无论实际地址如何变化，在编译时会重新计算’foo’地址，将引用到’foo’的指令修正到正确地址；</strong></p><h4 id="静态链接-模块拼装"><a href="#静态链接-模块拼装" class="headerlink" title="静态链接 | 模块拼装"></a>静态链接 | 模块拼装</h4><p><img src= "/chenyu3050.github.io/img/loading.gif" data-src="https://raw.githubusercontent.com/chenyu3050/imgs/master/d.jpg" alt="avatar"></p><h4 id="重定位-地址"><a href="#重定位-地址" class="headerlink" title="重定位 | 地址"></a>重定位 | 地址</h4><p><strong>比如a模块用b模块的var变量，var=0x1,编译a时，var的地址为0x00 00 00 00（因为不知道实际地址），之后链接器会讲正确地址覆盖0x00 00 00 00,每个修正的地方叫重定位入口。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;编译与链接&quot;&gt;&lt;a href=&quot;#编译与链接&quot; class=&quot;headerlink&quot; title=&quot;编译与链接&quot;&gt;&lt;/a&gt;编译与链接&lt;/h2&gt;&lt;h3&gt;被隐藏的过程&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$gcc hello.c
$./a.out
Hello 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://chenyu3050.github.io/2020/07/09/hello-world/"/>
    <id>https://chenyu3050.github.io/2020/07/09/hello-world/</id>
    <published>2020-07-09T15:25:33.028Z</published>
    <updated>2020-07-09T15:25:33.028Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
